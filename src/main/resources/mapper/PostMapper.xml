<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trip_gg.post.PostMapper">

    <!-- ✅ 기본 Post 매핑 -->
    <resultMap id="PostResultMap" type="com.trip_gg.post.Post">
        <id property="id" column="id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="users_id" column="users_id" />
        <result property="slug" column="slug" />
        <result property="url" column="url" />
<!--        <result property="view_count" column="view_count" />-->
        <result property="countries_id" column="countries_id" />
        <result property="cities_id" column="cities_id" />
        <result property="districts_id" column="districts_id" />
        <result property="created_at" column="created_at" />
    </resultMap>

    <!-- ✅ 댓글 + 위치 포함 Post 매핑 -->
    <resultMap id="PostWithCommentAndLocationResultMap" type="com.trip_gg.post.Post" extends="PostResultMap">

        <!-- ✅ Comment 리스트 -->
        <collection property="comments" ofType="com.trip_gg.comment.Comment">
            <id property="id" column="comment_id" />
            <result property="posts_id" column="comment_posts_id"/>
            <result property="users_id" column="comment_users_id" />
            <result property="content" column="comment_content" />
            <result property="created_at" column="comment_created_at" />
            <result property="nickname" column="comment_nickname" />
        </collection>

        <!-- ✅ Location 리스트 -->
        <collection property="locations" ofType="com.trip_gg.location.Location">
            <id property="id" column="location_id" />
            <result property="name" column="location_name" />
            <result property="lat" column="location_lat" />
            <result property="lng" column="location_lng" />
            <result property="created_at" column="location_created_at" />
            <result property="posts_id" column="location_posts_id" />
        </collection>
    </resultMap>

    <!-- ✅ 게시글 작성 -->
    <insert id="insertPost" parameterType="com.trip_gg.post.PostRequestDto" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO posts (
            users_id, countries_id, cities_id, districts_id, title,
            content, slug, url, created_at
        )
        VALUES (
                   #{users_id}, #{countries_id}, #{cities_id}, #{districts_id}, #{title},
                   #{content}, #{slug}, #{url}, #{created_at}
               )
    </insert>

    <!-- 카운트 업데이트 -->
    <insert id="upsertCounts" parameterType="int">
        INSERT INTO counts
            (posts_id, like_count, view_count, comment_count)
        VALUES
            ( #{posts_id},
            (SELECT COUNT(*) FROM likes WHERE posts_id = #{posts_id}),
            0,
            (SELECT COUNT(*) FROM comments WHERE posts_id = #{posts_id})
            )
        ON DUPLICATE KEY UPDATE
            like_count = VALUES(like_count),z
            view_count = VALUES(view_count),
            comment_count = VALUES(comment_count)
    </insert>


    <!-- ✅ 최신 게시글 8개 -->
    <select id="findLatestPosts" resultMap="PostResultMap">
        SELECT p.*
        FROM posts p
                 LEFT JOIN likes l ON l.posts_id = p.id
        GROUP BY p.id
        ORDER BY p.created_at DESC
            LIMIT 8
    </select>


    <!-- ✅ 인기 게시글 8개 -->
    <select id="findPopularPosts" resultMap="PostResultMap">
        SELECT * FROM posts ORDER BY view_count DESC LIMIT 8
    </select>

    <!-- ✅ 특정 도시 게시글 -->
    <select id="getPostsByCity" parameterType="String" resultMap="PostResultMap">
        SELECT p.*
        FROM posts p
                 JOIN cities c ON p.cities_id = c.id
        WHERE c.name = #{city}
        ORDER BY p.created_at DESC
    </select>

    <!-- ✅ 전체 게시글 목록 -->
    <select id="getAllPosts" resultMap="PostResultMap">
        SELECT * FROM posts ORDER BY created_at DESC
    </select>

    <!-- ✅ 게시글 상세 (댓글+위치 포함) -->
    <select id="getPostById" parameterType="int" resultMap="PostWithCommentAndLocationResultMap">
        SELECT
            p.id, p.title, p.content, p.users_id, p.slug, p.url,
            p.countries_id, p.cities_id, p.districts_id, p.created_at,

            co.view_count, co.like_count, co.comment_count,

            c.id AS comment_id,
            c.users_id AS comment_users_id,
            c.content AS comment_content,
            c.created_at AS comment_created_at,
            c.posts_id AS comment_posts_id,

            u.nickname AS comment_nickname,

            l.id AS location_id,
            l.name AS location_name,
            l.lat AS location_lat,
            l.lng AS location_lng,
            l.created_at AS location_created_at,
            l.posts_id AS location_posts_id

        FROM posts p
                 LEFT JOIN comments c ON p.id = c.posts_id
                 LEFT JOIN users u ON c.users_id = u.id
                 LEFT JOIN locations l ON p.id = l.posts_id
                 LEFT JOIN counts co ON p.id = co.posts_id
        WHERE p.id = #{id}
    </select>

    <!-- ✅ 게시글 수정 -->
    <update id="update" parameterType="com.trip_gg.post.Post">
        UPDATE posts
        SET title = #{title}, content = #{content}, url = #{url}, slug = #{slug},
            countries_id = #{countries_id}, cities_id = #{cities_id},
            districts_id = #{districts_id}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- ✅ 조회수 증가 -->
    <update id="updateViewCount" parameterType="int">
        UPDATE posts
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

    <!-- ✅ 위치 일관성 체크 -->
    <select id="checkLocationValidity" resultType="int">
        SELECT COUNT(*)
        FROM districts d
                 JOIN cities c ON d.cities_id = c.id
                 JOIN countries co ON c.countries_id = co.id
        WHERE co.id = #{countries_id}
          AND c.id = #{cities_id}
          AND d.id = #{districts_id}
    </select>
</mapper>
